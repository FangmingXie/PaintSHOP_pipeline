
# final pipeline endpoint
rule all:
    input:
        'pipeline_output/DONE_denovo.txt'

output_dir = config['output_dir_denovo']
CHROM_NAMES='pipeline_output/01_reference_files/01_chrom_names/chrom_names.txt',
MULTI_FASTA=f'pipeline_output/01_reference_files/02_multi_fasta/{config["assembly"]}.fa'
# parse out individual chromosome fastas for each canonical chromosome
checkpoint split_chroms:
    input:
        fasta=MULTI_FASTA,
        chrom_names=CHROM_NAMES,        
    output:
        chrom_fasta_dir=directory('pipeline_output/01_reference_files/03_chrom_fastas'),

# de novo
rule design_probes:
    input:
        'pipeline_output/01_reference_files/03_chrom_fastas/{chrom}.fa',
        'pipeline_output/01_reference_files/01_chrom_names/chrom_names.txt',
        'pipeline_output/01_reference_files/01_chrom_names/removed_unk.txt',
        'pipeline_output/01_reference_files/01_chrom_names/removed_excl.txt',
        'pipeline_output/01_reference_files/01_chrom_names/removed_rand.txt',
        'pipeline_output/01_reference_files/01_chrom_names/removed_alt.txt',
        'pipeline_output/01_reference_files/01_chrom_names/removed_hap.txt',
        'pipeline_output/01_reference_files/01_chrom_names/removed_fix.txt',
        f'pipeline_output/01_reference_files/02_multi_fasta/{config["assembly"]}.fa',
    output:
        f'pipeline_output/02_intermediate_files/{output_dir}/'+'{chrom}.fastq',
    conda:
        'envs/oligo_miner_env.yml'
    params:
        mfree='12G',
        h_rt='72:0:0',
        basename=f'pipeline_output/02_intermediate_files/{output_dir}/'+'{chrom}',
        min_length=config.get('blockparse_min_length', 30),
        max_length=config.get('blockparse_max_length', 37),
        min_tm=config.get('blockparse_min_tm', 42),
        max_tm=config.get('blockparse_max_tm', 47),
        salt=config.get('blockparse_salt', 390),
        formamide=config.get('blockparse_formamide', 50),
        dnac1=config.get('blockparse_dnac1', 25),
        dnac2=config.get('blockparse_dnac2', 25),
    shell:
        'python {workflow.basedir}/scripts/blockParse_unmasked.py --dnac1 {params.dnac1} --dnac2 {params.dnac2} -s {params.salt} -F {params.formamide} -l {params.min_length} -L {params.max_length} -t {params.min_tm} -T {params.max_tm} -f {input[0]} -o {params.basename}'

# aggregate paths to dynamically created files
def get_init_probe_paths(wildcards):

    # construct wild card path to checkpoint output files
    wildcard_path = os.path.join(
        checkpoints.split_chroms.get(**wildcards).output[0], 
        '{chrom}.fa'
    )

    # construct paths to downstream files to be aggregated
    file_paths = expand(
        rules.design_probes.output[0],
        chrom=glob_wildcards(wildcard_path).chrom
    )

    # success
    return(file_paths)

# merge probes for each chromosome
rule check_init_probes:
    input:
        get_init_probe_paths
    output:
        'pipeline_output/init_probes_done.txt'
    shell:
        "touch {output}"

# success
rule finish:
    input:
        rules.check_init_probes.output,
    output:
        'pipeline_output/DONE_denovo.txt'
    params:
        mfree='10G',
        h_rt='3:0:0'
    shell:
        'touch {output}'
